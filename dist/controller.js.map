{"version":3,"sources":["controller.ts"],"names":[],"mappings":"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","file":"controller.js","sourceRoot":"..\\src","sourcesContent":["\r\n\r\ntype EventCallback<T> = (sender: any, event: T) => void;\r\n\r\nexport interface gamepad_event {\r\n  'pad:connected': {\r\n    padnumber: number\r\n  },\r\n  'pad:disconnected': {\r\n    padnumber: number\r\n  },\r\n  'button:down': {\r\n    padnumber: number,\r\n    button: any\r\n  },\r\n  'button:up': {\r\n    padnumber: number,\r\n    button: any\r\n  }\r\n}\r\n\r\nexport class gamepad {\r\n\r\n  protected _controller: gamepadcontroller;\r\n  public get controller(): gamepadcontroller { return this._controller; }\r\n\r\n  private _index: number;\r\n  public get index(): number {\r\n    return this._index;\r\n  }\r\n\r\n  constructor(controller: gamepadcontroller, pad: Gamepad) {\r\n    this._controller = controller;\r\n    this._index = pad.index;\r\n  }\r\n\r\n  public refresh(): void {\r\n\r\n  }\r\n\r\n  public state(): any {\r\n    return {};\r\n  }\r\n}\r\n\r\nexport class snes_gamepad extends gamepad {\r\n\r\n  private _A: boolean = false;\r\n  public get A(): boolean { return this._A; }\r\n  private set A(v: boolean) { if (this._A != v) this.controller.fire(v ? 'button:down' : 'button:up', { padnumber: this.index, button: \"A\" }); this._A = v; }\r\n\r\n  private _B: boolean = false;\r\n  public get B(): boolean { return this._B; }\r\n  private set B(v: boolean) { if (this._B != v) this.controller.fire(v ? 'button:down' : 'button:up', { padnumber: this.index, button: \"B\" }); this._B = v; }\r\n\r\n  private _X: boolean = false;\r\n  public get X(): boolean { return this._X; }\r\n  private set X(v: boolean) { if (this._X != v) this.controller.fire(v ? 'button:down' : 'button:up', { padnumber: this.index, button: \"X\" }); this._X = v; }\r\n\r\n  private _Y: boolean = false;\r\n  public get Y(): boolean { return this._Y; }\r\n  private set Y(v: boolean) { if (this._Y != v) this.controller.fire(v ? 'button:down' : 'button:up', { padnumber: this.index, button: \"Y\" }); this._Y = v; }\r\n\r\n  private _Start: boolean = false;\r\n  public get Start(): boolean { return this._Start; }\r\n  private set Start(v: boolean) { if (this._Start != v) this.controller.fire(v ? 'button:down' : 'button:up', { padnumber: this.index, button: \"Start\" }); this._Start = v; }\r\n\r\n  private _Select: boolean = false;\r\n  public get Select(): boolean { return this._Select; }\r\n  private set Select(v: boolean) { if (this._Select != v) this.controller.fire(v ? 'button:down' : 'button:up', { padnumber: this.index, button: \"Select\" }); this._Select = v; }\r\n\r\n  private _Up: boolean = false;\r\n  public get Up(): boolean { return this._Up; }\r\n  private set Up(v: boolean) { if (this._Up != v) this.controller.fire(v ? 'button:down' : 'button:up', { padnumber: this.index, button: \"Up\" }); this._Up = v; }\r\n\r\n  private _Down: boolean = false;\r\n  public get Down(): boolean { return this._Down; }\r\n  private set Down(v: boolean) { if (this._Down != v) this.controller.fire(v ? 'button:down' : 'button:up', { padnumber: this.index, button: \"Down\" }); this._Down = v; }\r\n\r\n  private _Left: boolean = false;\r\n  public get Left(): boolean { return this._Left; }\r\n  private set Left(v: boolean) { if (this._Left != v) this.controller.fire(v ? 'button:down' : 'button:up', { padnumber: this.index, button: \"Left\" }); this._Left = v; }\r\n\r\n  private _Right: boolean = false;\r\n  public get Right(): boolean { return this._Right; }\r\n  private set Right(v: boolean) { if (this._Right != v) this.controller.fire(v ? 'button:down' : 'button:up', { padnumber: this.index, button: \"Right\" }); this._Right = v; }\r\n\r\n  public refresh(): void {\r\n    const state = navigator.getGamepads()[this.index];\r\n    if (state) {\r\n      this.X = state.buttons[0].pressed;\r\n      this.A = state.buttons[1].pressed;\r\n      this.B = state.buttons[2].pressed;      \r\n      this.Y = state.buttons[3].pressed;\r\n\r\n      this.Start = state.buttons[9].pressed;\r\n      this.Select = state.buttons[8].pressed;\r\n\r\n      this.Up = (state.axes[1] == -1);\r\n      this.Right = (state.axes[0] == 1);\r\n      this.Down = (state.axes[1] == 1);\r\n      this.Left = (state.axes[0] == -1);\r\n    }\r\n  }\r\n\r\n  public state(): any {\r\n    return {\r\n      A: this._A,\r\n      B: this._B,\r\n      X: this._X,\r\n      Y: this._Y,\r\n      Start: this._Start,\r\n      Select: this._Select,\r\n      Up: this._Up,\r\n      Right: this._Right,\r\n      Down: this._Down,\r\n      Left: this._Left\r\n    };\r\n  }\r\n}\r\n\r\nexport class gamepadcontroller {\r\n\r\n  private eventSubscriptions: any = {};\r\n  private _inEvent: { [key: string]: boolean } = new Object() as any;\r\n\r\n  private _padList: Array<gamepad> = [];\r\n\r\n  public isActive: boolean = false;\r\n\r\n  static isAvailable(): boolean { return !!navigator.getGamepads() }\r\n\r\n  private getPadByType(type: string, pad: Gamepad): gamepad {\r\n    if (type == \"snes\") return new snes_gamepad(this, pad);\r\n    throw \"pad type: \" + type + \" not registred\";\r\n  }\r\n\r\n  constructor(padtype: string = \"snes\") {\r\n    window.addEventListener('gamepadconnected', (e: GamepadEventInit) => {\r\n      console.log(\"Gamepad connected at index %d: %s. %d buttons, %d axes.\",\r\n        e.gamepad.index, e.gamepad.id,\r\n        e.gamepad.buttons.length, e.gamepad.axes.length);\r\n\r\n      const padToAdd = this.getPadByType(padtype, e.gamepad);\r\n      this._padList.push(padToAdd);\r\n    });\r\n    window.addEventListener('gamepaddisconnected', (e: GamepadEventInit) => {\r\n      console.log(\"Gamepad disconnected at index %d: %s. %d buttons, %d axes.\",\r\n        e.gamepad.index, e.gamepad.id,\r\n        e.gamepad.buttons.length, e.gamepad.axes.length);\r\n      const toRemove = this._padList.find(i => i.index == e.gamepad.index);\r\n      if (toRemove)\r\n        this._padList.splice(this._padList.indexOf(toRemove));\r\n    });\r\n\r\n    this.isActive = true;\r\n    this.gamepadLoop();\r\n  }\r\n\r\n  unload() {\r\n    this.isActive = false;\r\n  }\r\n\r\n  gamepadLoop() {\r\n    this._padList.forEach(pad => pad.refresh());\r\n\r\n    if (this.isActive)\r\n      window.requestAnimationFrame(this.gamepadLoop.bind(this));\r\n  }\r\n\r\n  getStates(): Array<any> {\r\n    const result: Array<any> = [];\r\n    this._padList.forEach(pad => {\r\n      result.push(pad.state());\r\n    });\r\n    return result;\r\n  }\r\n\r\n  on<K extends keyof gamepad_event>(\r\n    event: K | \"*\",\r\n    callback: EventCallback<gamepad_event[K]>\r\n  ) {\r\n    const events = event.split(\" \");\r\n    if (typeof callback === \"undefined\") {\r\n      debugger;\r\n    }\r\n\r\n    if (!this.eventSubscriptions) this.eventSubscriptions = {};\r\n\r\n    if (event === \"*\") {\r\n      for (let i = 0; i < events.length; i++) {\r\n        if (typeof this.eventSubscriptions[events[i]] === \"undefined\") {\r\n          this.eventSubscriptions[events[i]] = [];\r\n        }\r\n        this.eventSubscriptions[events[i]].push(callback);\r\n      }\r\n      return;\r\n    }\r\n\r\n    for (let i = 0; i < events.length; i++) {\r\n      if (typeof this.eventSubscriptions[events[i]] === \"undefined\") {\r\n        this.eventSubscriptions[events[i]] = [];\r\n      }\r\n      // avoid duplicate registration for the same event with the same callback method\r\n      if (this.eventSubscriptions[events[i]].indexOf(callback) === -1) {\r\n        this.eventSubscriptions[events[i]].push(callback);\r\n      } else {\r\n        //   debugger\r\n      }\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  fire<K extends keyof gamepad_event>(\r\n    event: K,\r\n    args: gamepad_event[K]\r\n  ): void {\r\n    try {\r\n      if (!this.eventSubscriptions) return;\r\n\r\n      if (typeof (this.eventSubscriptions as any)[event] === \"undefined\")\r\n        return;\r\n\r\n      if (this._inEvent[event] === true) return;\r\n\r\n      this._inEvent[event] = true;\r\n\r\n      const subscribers = (this.eventSubscriptions as any)[event];\r\n\r\n      for (let i = 0; i < subscribers.length; i++) {\r\n        subscribers[i](this, args);\r\n      }\r\n    } catch (exc) {\r\n      console.log(exc);\r\n      throw exc;\r\n    } finally {\r\n      this._inEvent[event] = false;\r\n    }\r\n  }\r\n\r\n  off<K extends keyof gamepad_event>(\r\n    event: K | \"*\",\r\n    callback: EventCallback<K>\r\n  ): void {\r\n    if (typeof (this.eventSubscriptions as any)[event] !== \"undefined\") {\r\n      (this.eventSubscriptions as any)[event] = (\r\n        this.eventSubscriptions as any\r\n      )[event].filter((toFilter: any) => {\r\n        return toFilter !== callback;\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n/*\r\ninterface symoloWindow {\r\n  symolo: any;\r\n}\r\n\r\n(window as unknown as symoloWindow).symolo = {\r\n  gamepadcontroller: gamepadcontroller\r\n}\r\n*/"]}