{"version":3,"sources":["pad.ts","gamepadctrl.ts"],"names":[],"mappings":"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","file":"gamepadctrl.js","sourceRoot":"..\\src","sourcesContent":["import { gamepadctrl } from \"./gamepadctrl\";\r\n\r\n/**\r\n * @private\r\n * @abstract\r\n * baseclass for all pads\r\n */\r\n export abstract class base_gamepad {\r\n\r\n  protected _controller: gamepadctrl;\r\n  public get controller(): gamepadctrl { return this._controller; }\r\n\r\n  private _index: number;\r\n  public get index(): number {\r\n    return this._index;\r\n  }\r\n\r\n  constructor(controller: gamepadctrl, pad: Gamepad) {\r\n    this._controller = controller;\r\n    this._index = pad.index;\r\n  }\r\n\r\n  public refresh(): void {\r\n\r\n  }\r\n\r\n  public state(): any {\r\n    return {};\r\n  }\r\n}\r\n\r\n/**\r\n * @public\r\n * simple implementation of an snes controller\r\n */\r\nexport class snes_gamepad extends base_gamepad {\r\n\r\n  private _A: boolean = false;\r\n  public get A(): boolean { return this._A; }\r\n  private set A(v: boolean) { if (this._A != v) this.controller.fire(v ? 'button:down' : 'button:up', { padnumber: this.index, button: \"A\" }); this._A = v; }\r\n\r\n  private _B: boolean = false;\r\n  public get B(): boolean { return this._B; }\r\n  private set B(v: boolean) { if (this._B != v) this.controller.fire(v ? 'button:down' : 'button:up', { padnumber: this.index, button: \"B\" }); this._B = v; }\r\n\r\n  private _X: boolean = false;\r\n  public get X(): boolean { return this._X; }\r\n  private set X(v: boolean) { if (this._X != v) this.controller.fire(v ? 'button:down' : 'button:up', { padnumber: this.index, button: \"X\" }); this._X = v; }\r\n\r\n  private _Y: boolean = false;\r\n  public get Y(): boolean { return this._Y; }\r\n  private set Y(v: boolean) { if (this._Y != v) this.controller.fire(v ? 'button:down' : 'button:up', { padnumber: this.index, button: \"Y\" }); this._Y = v; }\r\n\r\n  private _Start: boolean = false;\r\n  public get Start(): boolean { return this._Start; }\r\n  private set Start(v: boolean) { if (this._Start != v) this.controller.fire(v ? 'button:down' : 'button:up', { padnumber: this.index, button: \"Start\" }); this._Start = v; }\r\n\r\n  private _Select: boolean = false;\r\n  public get Select(): boolean { return this._Select; }\r\n  private set Select(v: boolean) { if (this._Select != v) this.controller.fire(v ? 'button:down' : 'button:up', { padnumber: this.index, button: \"Select\" }); this._Select = v; }\r\n\r\n  private _Up: boolean = false;\r\n  public get Up(): boolean { return this._Up; }\r\n  private set Up(v: boolean) { if (this._Up != v) this.controller.fire(v ? 'button:down' : 'button:up', { padnumber: this.index, button: \"Up\" }); this._Up = v; }\r\n\r\n  private _Down: boolean = false;\r\n  public get Down(): boolean { return this._Down; }\r\n  private set Down(v: boolean) { if (this._Down != v) this.controller.fire(v ? 'button:down' : 'button:up', { padnumber: this.index, button: \"Down\" }); this._Down = v; }\r\n\r\n  private _Left: boolean = false;\r\n  public get Left(): boolean { return this._Left; }\r\n  private set Left(v: boolean) { if (this._Left != v) this.controller.fire(v ? 'button:down' : 'button:up', { padnumber: this.index, button: \"Left\" }); this._Left = v; }\r\n\r\n  private _Right: boolean = false;\r\n  public get Right(): boolean { return this._Right; }\r\n  private set Right(v: boolean) { if (this._Right != v) this.controller.fire(v ? 'button:down' : 'button:up', { padnumber: this.index, button: \"Right\" }); this._Right = v; }\r\n\r\n  public refresh(): void {\r\n    const state = navigator.getGamepads()[this.index];\r\n    if (state) {\r\n      this.X = state.buttons[0].pressed;\r\n      this.A = state.buttons[1].pressed;\r\n      this.B = state.buttons[2].pressed;\r\n      this.Y = state.buttons[3].pressed;\r\n\r\n      this.Start = state.buttons[9].pressed;\r\n      this.Select = state.buttons[8].pressed;\r\n\r\n      this.Up = (state.axes[1] == -1);\r\n      this.Right = (state.axes[0] == 1);\r\n      this.Down = (state.axes[1] == 1);\r\n      this.Left = (state.axes[0] == -1);\r\n    }\r\n  }\r\n\r\n  public state(): any {\r\n    return {\r\n      A: this._A,\r\n      B: this._B,\r\n      X: this._X,\r\n      Y: this._Y,\r\n      Start: this._Start,\r\n      Select: this._Select,\r\n      Up: this._Up,\r\n      Right: this._Right,\r\n      Down: this._Down,\r\n      Left: this._Left\r\n    };\r\n  }\r\n}","import { base_gamepad, snes_gamepad } from \"./pad\";\r\n\r\n\r\n/**\r\n * @internal\r\n * Types for hnadling events\r\n * \r\n */\r\ntype EventCallback<T> = (sender: any, event: T) => void;\r\n\r\n/**\r\n * List of all Events the creates\r\n * \r\n * All events that created\r\n * use it like so\r\n * ```js\r\n * var controller = new gamepadctrl();\r\n * controller.on('button:up', (_, args) => {\r\n *   if (args.button == \"X\") playaDiv.style.backgroundColor = 'blue';\r\n * }\r\n * ```\r\n * @public\r\n */\r\nexport interface gamepad_event {\r\n  'pad:connected': {\r\n    padnumber: number\r\n  },\r\n  'pad:disconnected': {\r\n    padnumber: number\r\n  },\r\n  'button:down': {\r\n    padnumber: number,\r\n    button: any\r\n  },\r\n  'button:up': {\r\n    padnumber: number,\r\n    button: any\r\n  }\r\n}\r\n\r\n\r\nclass controllerfactory {\r\n  /**\r\n   * factory for create a pad by type\r\n   * @param type name of the type to create\r\n   * @param pad the current system gamepad\r\n   * @returns a new symolo.pad\r\n   */\r\n  public static getPadByType(type: string, pad: Gamepad, controller: gamepadctrl): base_gamepad {\r\n    if (type == \"snes\") return new snes_gamepad(controller, pad);\r\n    throw \"pad type: \" + type + \" not registred\";\r\n  }\r\n}\r\n\r\nclass _eventhandler<T> {\r\n  private _evtsubs: any;\r\n  private _inevt: { [key: string]: boolean };\r\n\r\n  on<K extends keyof T>(event: K, callback: EventCallback<T[K]>): this {\r\n    if (typeof callback === \"undefined\") debugger;\r\n    if (!this._evtsubs) this._evtsubs = {};\r\n    if (typeof this._evtsubs[event] === \"undefined\") {\r\n      this._evtsubs[event] = [];\r\n    }\r\n    // avoid duplicate registration\r\n    if (this._evtsubs[event].indexOf(callback) === -1) {\r\n      this._evtsubs[event].push(callback);\r\n    }\r\n    return this; // for chaining\r\n  }\r\n\r\n  fire<K extends keyof T>(event: K, args: T[K]): void {\r\n    if (typeof this._inevt === \"undefined\") this._inevt = {};\r\n    try {\r\n      if (!this._evtsubs) return;\r\n      if (typeof (this._evtsubs as any)[event] === \"undefined\") return;\r\n      if (this._inevt[event as string] === true) return;\r\n      this._inevt[event as string] = true;\r\n      const subscribers = (this._evtsubs as any)[event];\r\n      for (let i = 0; i < subscribers.length; i++) {\r\n        subscribers[i](this, args);\r\n      }\r\n    } catch (exc) {\r\n      throw exc;\r\n    } finally {\r\n      this._inevt[event as string] = false;\r\n    }\r\n  }\r\n\r\n  off<K extends keyof gamepad_event>(event: K, callback: EventCallback<K>): void {\r\n    if (typeof (this._evtsubs as any)[event] !== \"undefined\") {\r\n      (this._evtsubs as any)[event] = (this._evtsubs as any)[event]\r\n        .filter((toFilter: any) => {\r\n          return toFilter !== callback;\r\n        });\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * class for manage pads \r\n * dont forget to call unload if nessesary \r\n * ```js\r\n * var controller = new gamepadctrl();\r\n * controller.unload();\r\n * controller = null;\r\n * ```\r\n * @public\r\n */\r\nexport class gamepadctrl extends _eventhandler<gamepad_event> {\r\n\r\n  static isAvailable(): boolean { return !!navigator.getGamepads() }\r\n\r\n  private _padtype: string = \"snes\";\r\n\r\n  private _padList: Array<base_gamepad>;\r\n\r\n  public isActive: boolean = false;\r\n\r\n  constructor() {\r\n    super();\r\n    this._padList = new Array<base_gamepad>();\r\n\r\n    window.addEventListener('gamepadconnected', (e: GamepadEventInit) => {\r\n      // console.log(\"Gamepad connected at index %d: %s. %d buttons, %d axes.\",\r\n      //   e.gamepad.index, e.gamepad.id,\r\n      //   e.gamepad.buttons.length, e.gamepad.axes.length);\r\n      const padToAdd = controllerfactory.getPadByType(this._padtype, e.gamepad, this as unknown as gamepadctrl);\r\n      this._padList.push(padToAdd);\r\n    });\r\n    window.addEventListener('gamepaddisconnected', (e: GamepadEventInit) => {\r\n      // console.log(\"Gamepad disconnected at index %d: %s. %d buttons, %d axes.\",\r\n      //   e.gamepad.index, e.gamepad.id,\r\n      //   e.gamepad.buttons.length, e.gamepad.axes.length);\r\n      const toRemove = this._padList.find(i => i.index == e.gamepad.index);\r\n      if (toRemove)\r\n        this._padList.splice(this._padList.indexOf(toRemove));\r\n    });\r\n\r\n    this.isActive = true;\r\n    this.gamepadLoop();\r\n  }\r\n\r\n  /**\r\n   * stop to watching loop the states wont updated anymore\r\n   */\r\n  public unload(): void {\r\n    this.isActive = false;\r\n  }\r\n\r\n  private gamepadLoop(): void {\r\n    this._padList.forEach(pad => pad.refresh());\r\n\r\n    if (this.isActive)\r\n      window.requestAnimationFrame(this.gamepadLoop.bind(this));\r\n  }\r\n\r\n  public getStates(): Array<any> {\r\n    const result: Array<any> = [];\r\n    this._padList.forEach(pad => {\r\n      result.push(pad.state());\r\n    });\r\n    return result;\r\n  }\r\n}\r\n\r\n"]}